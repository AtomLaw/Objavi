#!/usr/bin/env python
#
# This file is part of Objavi.
# Copyright (c) 2012 Borko Jandras <borko.jandras@sourcefabric.org>
#
# Objavi is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Objavi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with Objavi.  If not, see <http://www.gnu.org/licenses/>.
#

import os
import re
import sys
import optparse


class MajorError(Exception):
    def __init__(self, description = ''):
        self.description = description

    def __str__(self):
        return repr(self.description)

class InstallError(MajorError):
    pass


def dirname(path, rep=0):
    path = os.path.dirname(path)
    if rep > 0:
        return dirname(path, rep - 1)
    else:
        return path


VALID_PROJECT_NAME_REGEXP = re.compile("^[a-zA-Z_][a-zA-Z0-9_]*$")


verbose = 0

def log(msg):
    if verbose:
        print msg,

def logln(msg):
    if verbose:
        print msg


def check_python_version():
    """Check what version of Python user has."""

    major, minor = sys.version_info[:2]

    if major == 2:
        if minor < 5:
            raise MajorError("This version of Python is too old for Objavi.")
        elif minor < 7:
            logln("Recommend upgrading your Python installation to Python 2.7 or newer.")
    elif major == 3:
        raise MajorError("Objavi can not work with Python 3.")
    else:
        raise MajorError("This version of Python is too old for Objavi.")


def check_django_version():
    """Check what version of Django user has."""

    log("+ Trying to import Django... ")

    try:
        import django
    except ImportError:
        raise InstallError()
    else:
        logln("[OK]")

    major, minor = django.VERSION[:2]

    if major == 1:
        if minor < 2:
            raise MajorError("This version of Django is too old for Objavi.")


def check_module_available(module_name):
    log("+ Trying to import %s... " % module_name)

    try:
        __import__(module_name)
    except ImportError:
        raise InstallError()
    else:
        logln("[OK]")


def check_versions():
    check_python_version()
    check_django_version()

    CHECK_MODULES = ("lxml", "redis", "djcelery", "booki", "objavi")
    for module_name in CHECK_MODULES:
        check_module_available(module_name)


def create_destination(destination):
    project_name = get_project_name(destination)
    if project_name in ("objavi", "booktype", "booki"):
        raise MajorError("destination directory name is not valid: %s" % destination)
    if not VALID_PROJECT_NAME_REGEXP.match(project_name):
        raise MajorError("destination directory name is not valid: %s" % destination)

    if not os.path.exists(destination):
        try:
            os.mkdir(destination)
        except OSError:
            raise MajorError("Unable to create directory %s!\nMake sure you have proper permissions." % destination)

    if not os.access(destination, os.W_OK):
        raise MajorError("Unable to write in %s!\nMake sure you have proper permissions." % destination)

    CHECK_FILES = (
        "__init__.py",
        "settings.py",
        "manage.py",
        "wsgi.py",
        "apache.conf",
        "supervisor.conf",
        "environment.sh",
        )

    for file_name in CHECK_FILES:
        file_path = os.path.join(destination, file_name)
        if os.path.exists(file_path):
            raise MajorError("Destination directory already contains file %s! Will not overwrite.\nChoose another destination directory or manualy fix this issue." % file_path)


def make_directory_structure(destination):
    def mkdir(dir_name):
        path = os.path.join(destination, dir_name)
        log("+ Creating directory '%s'... " % dir_name)
        if os.path.exists(path):
            logln("[EXISTS]")
        else:
            os.mkdir(path)
            logln("[OK]")
    try:
        for d in ['static', 'templates', 'lib', 'locale', 'logs', 'cache', 'data']:
            mkdir(d)
        for d in ['books', 'booki-books', 'shared', 'tmp']:
            mkdir('data/%s' % d)
    except OSError:
        raise InstallError()


def create_booki_link(destination, booktype_path):
    src_path = os.path.join(booktype_path, "lib", "booki")
    dst_path = os.path.join(destination, "lib", "booki")
    log("+ Creating link to %s..." % src_path)
    try:
        os.symlink(src_path, dst_path)
    except OSError:
        raise InstallError()
    else:
        logln("[OK]")


def create_file(destination, file_name, file_text, args = {}):
    if args:
        file_text = file_text % args

    log("+ Creating file %s... " % file_name)
    try:
        f = open(os.path.join(destination, file_name), 'wt')
        f.write(file_text)
        f.close()
    except OSError:
        raise InstallError()
    else:
        logln("[OK]")


def get_project_name(destination):
    dirs = [n for n in os.path.abspath(destination).split(os.sep) if n.strip() != '']
    return dirs[-1]


def get_source_path():
    import objavi
    return dirname(os.path.abspath(objavi.__file__), 2)


def create_environment_sh(destination):
    file_text = """\
# Shell environment setup script for Objavi.
#
# Source this script from your interactive shell if you want to run Objavi
# from a command line, for example when using Django's built-in webserver.
#

# Name of the Django settings module (in Python syntax).
export DJANGO_SETTINGS_MODULE=%(project_name)s.settings

# Add Objavi libraries to PYTHONPATH.
PYTHONPATH=$PYTHONPATH:%(parent_path)s:%(destination)s/lib:%(source_path)s/lib

# If you are using some Python libraries which are not installed to a standard
# location, add path to them here, e.g.
#PYTHONPATH=$PYTHONPATH:/usr/local/share/somelib

# If you are using programs and/or shared libraries which are not installed to
# a standard location, add path to them here, e.g.
#PATH=$PATH:/usr/src/Django-1.3/django/bin

export PYTHONPATH PATH
"""
    file_name = "environment.sh"
    args = {
        "project_name" : get_project_name(destination),
        "parent_path"  : dirname(destination),
        "destination"  : destination,
        "source_path"  : get_source_path(),
    }
    return create_file(destination, file_name, file_text, args)


def create_manage_py(destination):
    file_text = """\
#!/usr/bin/env python

import os, sys

from django.core import management
from django.core.management import execute_manager

# Name of the Django settings module (in Python syntax).
os.environ['DJANGO_SETTINGS_MODULE'] = '%(project_name)s.settings'

# Add Objavi libraries to PYTHONPATH.
#
sys.path.insert(0, '%(parent_path)s')
sys.path.insert(1, '%(destination)s/lib')
sys.path.insert(2, '%(source_path)s/lib')

# If you are using some Python libraries which are not installed to a standard
# location, add path to them here, e.g.
#sys.path.append("/usr/local/share/somelib")

if __name__ == "__main__":
    management.execute_from_command_line()
"""
    file_name = "manage.py"
    args = {
        "project_name" : get_project_name(destination),
        "parent_path"  : dirname(destination),
        "destination"  : destination,
        "source_path"  : get_source_path(),
    }
    return create_file(destination, file_name, file_text, args)


def create_wsgi(destination):
    file_text = """\
# WSGI script for Objavi.
#
# This file is referenced from the Apache site configuration file by the
# WSGIScriptAlias directive (from the mod_wsgi module).
#

import os, sys
import django.core.handlers.wsgi

# Name of the Django settings module (in Python syntax).
os.environ['DJANGO_SETTINGS_MODULE'] = '%(project_name)s.settings'

# Add Objavi libraries to PYTHONPATH.
#
sys.path.insert(0, '%(parent_path)s')
sys.path.insert(1, '%(destination)s/lib')
sys.path.insert(2, '%(source_path)s/lib')

# If you are using some Python libraries which are not installed to a standard
# location, add path to them here, e.g.
#sys.path.append("/usr/local/share/somelib")

# The application object.
#
def application(environ, start_response):
    # transfer SERVER_NAME and SERVER_PORT to process environment
    os.environ["SERVER_NAME"] = environ["SERVER_NAME"]
    os.environ["SERVER_PORT"] = environ["SERVER_PORT"]
    # run the WSGI handler
    app = django.core.handlers.wsgi.WSGIHandler()
    return app(environ, start_response)
"""
    file_name = "wsgi.py"
    args = {
        "project_name" : get_project_name(destination),
        "parent_path"  : dirname(destination),
        "destination"  : destination,
        "source_path"  : get_source_path(),
    }
    return create_file(destination, file_name, file_text, args)


def create_apache_conf(destination):
    file_text = """\
# Example Apache site configuration for Objavi.
#
# Edit this file to your liking, then copy it to the Apache's available sites
# directory, e.g. /etc/apache2/sites-available/objavi.
#
# Alternatively, you can use the Apache's Include directive to include the
# content of this file inside an existing configuration file, for example
# in /etc/apache2/sites-available/objavi:
#   Include %(destination)s/%(file_name)s
#
# Don't forget to enable this site afterwards:
#   a2ensite objavi
#   service apache2 reload
#

<VirtualHost *:80>
	SetEnv LC_TIME "en_GB.UTF-8"
	SetEnv LANG "en_GB.UTF-8"

	WSGIScriptAlias /         %(destination)s/wsgi.py
	Alias           /static   %(destination)s/static
	Alias           /data     %(destination)s/data

	<Location "/">
		Allow from all
		Options FollowSymLinks
	</Location>

	<Directory "%(destination)s/static">
		Options Indexes FollowSymLinks MultiViews
		AllowOverride None
		Order allow,deny
		allow from all
	</Directory>

	<Directory "%(destination)s/data">
		Options Indexes FollowSymLinks MultiViews
		AllowOverride None
		Order allow,deny
		allow from all
	</Directory>

        ErrorLog  ${APACHE_LOG_DIR}/objavi-error.log
        CustomLog ${APACHE_LOG_DIR}/objavi-access.log combined
        LogLevel  warn
</VirtualHost>
"""
    file_name = "apache.conf"
    args = {
        "destination"  : destination,
        "source_path"  : get_source_path(),
        "file_name"    : file_name,
    }
    return create_file(destination, file_name, file_text, args)


def create_supervisor_conf(destination):
    file_text = """\
; Supervisor configuration for Objavi.
;
; Copy or link this file to Supervisor's configuration directory,
; e.g. /etc/supervisor/conf.d/objavi.
;
; Don't forget to restart the Supervisor sevice to take effect:
;   $ sudo killall -HUP supervisord
;

[program:objavi-celery-worker]
directory       = %(destination)s
command         = python manage.py celery worker --events
user            = www-data
stopwaitsecs    = 60

[program:objavi-celery-camera]
directory       = %(destination)s
command         = python manage.py celery events --camera=djcelery.snapshot.Camera
"""
    file_name = "supervisor.conf"
    args = {
        "destination"  : destination,
        "file_name"    : file_name,
    }
    return create_file(destination, file_name, file_text, args)


def create_settings(destination):
    source_path = get_source_path()

    file_text = ""

    try:
        file_text = open('%s/doc/deployment/example-settings.py' % source_path, 'r').read()
    except IOError:
        raise MajorError("[ERROR] Can't read example-settings.py file.")

    args = {
        "destination" : destination,
        "source_path" : source_path,
        }

    def set_var(text, name, value):
        return text.replace('##%s##' % name.upper(), value)

    for key, val in args.items():
        file_text = set_var(file_text, key, val)

    file_name = "settings.py"

    create_file(destination, file_name, file_text)
    create_file(destination, "__init__.py", "")


def create_postinstall_txt(destination):
    file_text = """\

An Objavi project has been successfully created in:
   
    %(destination)s

The following files and directories have been generated:

    POST_INSTALL.txt --  this file
    post_install.sh  --  performs final set-up steps
    apache.conf      --  Apache site confguration file
    supervisor.conf  --  Supervisor daemon configuration file
    environment.sh   --  shell environment setup script
    manage.py        --  Django site management utility
    settings.py      --  Django settings module
    wsgi.py          --  WSGI script for Apache
    static           --  static web files (HTML, CSS, javascript)
    templates        --  local template files
    locale           --  local translation files
    lib              --  local Python libraries
    logs             --  log files
    cache            --  temporary cache files
    data             --  created data files

Check each configuration file for additional customisations and installation
instructions.

To complete the installation, change the current directory to the directory
containing this file, then issue the following command as a super-user:

    bash post_install.sh

If the post_install.sh script complains about www-data user not being known
on the system, edit the script and replace www-data user with the name of the
user that the web server is using.

For instructions on how to run your newly-created Objavi site using the
Apache web server, see the apache.conf file.

"""
    file_name = "POST_INSTALL.txt"
    args = {
        "destination" : destination,
        }
    create_file(destination, file_name, file_text, args)


def create_postinstall_sh(destination):
    file_text = """\
#!/bin/bash

www_data_user="www-data"  # edit this if necessary

##############################################################################

echo "Using '$www_data_user' as web server account."

# www user's group name
www_data_group=`id -gn $www_data_user 2>/dev/null`

if ! test "$www_data_group"; then
    echo "ERROR: the $www_data_user user is unknown on this system."
    exit 1
fi

echo "Using '$www_data_group' as web server account group."

destination="%(destination)s"

if test "$PWD" != "$destination"; then
    echo "ERROR: this script must be run in '$destination'"
    exit 1
fi

if test $UID != 0; then
    echo "ERROR: this script must be run as root"
    exit 1
fi

# environment needed by django-admin
source ./environment.sh

# apply correct ownership and permissions
#
chgrp -R $www_data_group logs cache data static
chmod -R g+rw logs cache data static

# collect static files
su -m -c "django-admin collectstatic --noinput --verbosity=0" $www_data_user

# create initial database
#
django-admin syncdb
if test -f objavi.db; then
    chgrp $www_data_group objavi.db
    chmod g+rw objavi.db
fi

# install Supervisor conf
#
echo -e "\nInstalling the Supervisor configuration file for Objavi..."
if test -d "/etc/supervisor/conf.d"; then
    echo -n "Copy Supervisor configuration file to /etc/supervisor/conf.d? (yes/no): "
    read answer
    if test $answer = "yes"; then
        cp -v supervisor.conf /etc/supervisor/conf.d/objavi.conf
    else
        echo "Make sure you install the Supervisor configuration file manually."
    fi
else
   echo -e "The /etc/supervisor/conf.d directory is missing. Make sure you install\nthe Supervisor configuration file (supervisor.conf) manually."
fi

echo -e "\nDone."
"""
    file_name = "post_install.sh"
    args = {
        "destination" : destination,
        }
    create_file(destination, file_name, file_text, args)


def show_after(destination):
    message = """\

An Objavi project has been successfully created in:
   
    %(destination)s

A file named POST_INSTALL.txt has been created there.  Please read it for
post installation instructions.  It is very important!
"""
    args = {
        "destination" : destination,
        }
    print(message % args)


def main():
    usage = """\
usage: %prog [options] install_path\n  e.g. create_site /var/www/objavi/  \
"""

    parser = optparse.OptionParser(usage)
    parser.add_option("-q", "--quiet", action="store_const", const=0, dest="verbose", help="don't print messages to stdout")
    parser.add_option("--with-booktype", action="store", dest="booktype_path", help="path to Booktype sources")
    parser.set_defaults(verbose=True)

    (options, args) = parser.parse_args()

    if len(args) != 1:
        parser.error("incorrect number of arguments")

    global verbose
    verbose = options.verbose

    this_file_path = os.path.abspath(sys.argv[0])
    source_directory = dirname(this_file_path, 1)

    sys.path.insert(0, os.path.join(source_directory, "lib"))

    if options.booktype_path:
        sys.path.append(os.path.join(options.booktype_path, "lib"))

    check_versions()

    project_destination = os.path.abspath(args[0])

    create_destination(project_destination)
    make_directory_structure(project_destination)
    if options.booktype_path:
        create_booki_link(project_destination, options.booktype_path)
    create_environment_sh(project_destination)
    create_manage_py(project_destination)
    create_wsgi(project_destination)
    create_apache_conf(project_destination)
    create_supervisor_conf(project_destination)
    create_settings(project_destination)
    create_postinstall_txt(project_destination)
    create_postinstall_sh(project_destination)

    show_after(project_destination)


if __name__ == "__main__":
    try:
        main()
    except InstallError:
        print("[ERROR]")
        sys.exit(-1)
    except MajorError, e:
        print("[ERROR] " + e.description)
        sys.exit(-1)
